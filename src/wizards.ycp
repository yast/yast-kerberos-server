/* ------------------------------------------------------------------------------
 * Copyright (c) 2006,2007 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/kerberos-server/wizards.ycp
 * Package:	Configuration of kerberos-server
 * Summary:	Wizards definitions
 * Authors:	Michael Calmer <mc@novell.com>
 *
 * $Id: wizards.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "kerberos-server";

import "Sequencer";
import "Wizard";
import "Package";

include "kerberos-server/complex.ycp";

/**
 * Main workflow of the kerberos-server configuration
 * @return sequence result
 */
any MainSequence()
{
    map aliases = $[
					"summary"   :  ``( SummaryDialog() ),
					"advanced"  :  ``( AdvancedConfiguration(false))
				   ];

    map sequence = $[
					 "ws_start" : "summary",
					 "summary" : $[
								   `abort	: `abort,
								   `back    : `abort,
								   `next	: `next,
								   `edit	: "advanced",
								  ],
					 "advanced" : $[
									`abort	: `abort,
									`next	: "summary",
									`back   : "summary"
								   ]
					];

    any ret = Sequencer::Run(aliases, sequence);
	
    return ret;
}

/**
 * Whole configuration of kerberos-server
 * @return sequence result
 */
any KerberosServerSequence()
{
	map aliases = $[
					"read"	    : ``( ReadDialog() ),
					"main"	    : ``( MainSequence() ),
					"dbtype"    : ``( AskDBtypeDialog() ),
					"basicf"    : ``( AskBasicDialog(true) ),
					"basicli"   : ``( AskBasicDialog(false) ),
					"basiclu"   : ``( AskBasicDialog(false) ),
					"ldapinit"  : ``( AskLdapDialog(true) ),
					"ldapuse"   : ``( AskLdapDialog(false) ),
					"advancedf" : ``( AdvancedConfiguration(false)),
					"advancedli": ``( AdvancedConfiguration(true)),
					"advancedlu": ``( AdvancedConfiguration(true)),
					"write"	    : ``( WriteDialog() )
				   ];

    map sequence = $[
					 "ws_start" : "read",
					 "read" : $[
								`abort	: `abort,
								`next	: "main",
								`init   : "dbtype",
								`back   : `abort
							   ],
					 "main" : $[
								`abort	: `abort,
								`next	: "write"
							   ],
					 "dbtype" : $[
								  `abort	  : `abort,
								  `file       : "basicf",
								  `newldap    : "basicli",
								  `useldap    : "basiclu",
								  `back       : `abort
								 ],
					 "basicf"  : $[
								 `abort	: `abort,
								 `next	: "write",
								 `back  : "dbtype",
								 `advanced   : "advancedf"
								  ],
					 "basicli"  : $[
								 `abort	: `abort,
								 `next	: "ldapinit",
								 `back  : "dbtype",
								 `advanced   : "advancedli"
								],
					 "basiclu"  : $[
								 `abort	: `abort,
								 `next	: "ldapuse",
								 `back  : "dbtype",
								 `advanced   : "advancedlu"
								],
					 "ldapinit" : $[
									`abort	: `abort,
									`next	: "write",
									`back   : "basicli",
									`advanced   : "advancedli"
								   ],
					 "ldapuse" : $[
								   `abort	: `abort,
								   `next	: "write",
								   `back    : "basiclu",
								   `advanced   : "advancedlu"
								  ],
					 "advancedf" : $[
									`abort      : `abort,
									`next       : "basicf",
									`back       : "basicf"
								   ],
					 "advancedli" : $[
									`abort      : `abort,
									`next       : "ldapinit",
									`back       : "ldapinit"
								   ],
					 "advancedlu" : $[
									`abort      : `abort,
									`next       : "ldapuse",
									`back       : "ldapuse"
								   ],
					 "write" : $[
								 `abort	: `abort,
								 `next	: `next,
								 `back  : "main"
								]
					];
	
    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);
	
    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of kerberos-server but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any KerberosServerAutoSequence() {
	
    /* Initialization dialog caption */
    string caption = _("Kerberos Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));
	
    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
							   Label::BackButton(), Label::NextButton());
	
    any ret = MainSequence();
	
    UI::CloseDialog();
    return ret;
}

/* EOF */
}
