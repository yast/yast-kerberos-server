/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/kerberos-server/complex.ycp
 * Package:	Configuration of kerberos-server
 * Summary:	Dialogs definitions
 * Authors:	Michael Calmer <mc@novell.com>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "kerberos-server";

import "Label";
import "Popup";
import "Wizard";
import "Wizard_hw";
import "Confirm";
import "KerberosServer";
import "CWMFirewallInterfaces";

include "kerberos-server/helps.ycp";
include "kerberos-server/advanced_items.ycp";

/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return KerberosServer::Modified();
}

boolean ReallyAbort() {
    return !KerberosServer::Modified() || Popup::ReallyAbort(true);
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // KerberosServer::AbortFunction = PollAbort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = KerberosServer::Read();

	if(!ret)
	{
		return `abort;
	}
	
	y2milestone("Wizard: found Database? : %1", KerberosServer::getFoundDB());
	
    if( KerberosServer::getFoundDB() == false )
    {
        return `init;
    }
	return `next;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // KerberosServer::AbortFunction = PollAbort;
    boolean ret = KerberosServer::Write();
	if (! ret && Popup::YesNo (_("Saving the configuration failed. Change the settings?")))
		return `back;
    return ret ? `next : `abort;
}


symbol AskDBtypeDialog() {
    Wizard::RestoreHelp(HELPS["AskDBtype"]:"");

    /* caption */
    string caption = _("Select the Database Back-End");
	
	term content = `HVCenter(
  				   `HVSquash(
					  /* Button group label */
                      `Frame(_("Select the database back-end you want to use"),
                        `RadioButtonGroup( `id(`rb), 
                          `VBox(
								// Checkbox text
								`Left (`RadioButton( `id( `file),    `opt (`notify), _("&Local Database"), true)),
								// Checkbox text
								`Left (`RadioButton( `id( `newldap), `opt (`notify), _("&Set up new LDAP server as database back-end"))),
								// Checkbox text
								`Left (`RadioButton( `id( `useldap), `opt (`notify), _("&Use existing LDAP server as database back-end")))
							   )
							 )
							)
						)
                  );

    Wizard::SetContentsButtons (
        caption, content, HELPS["AskDBtype"]:"",
        Label::BackButton (),
        Label::NextButton ()
    );

	KerberosServer::setDBtype("file");
	KerberosServer::setDBvalue("database_name", "/var/lib/kerberos/krb5kdc/principal");

    symbol ret = `file;
    while(true)
	{
		ret = (symbol) UI::UserInput();
		
		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back) {
			if(ReallyAbort())
			{
				ret = `abort;
				break;
			}
			else continue;
		}
		else if(ret == `file)
		{
			KerberosServer::setDBtype("file");
			KerberosServer::setDBvalue("database_name", "/var/lib/kerberos/krb5kdc/principal");
		}
		else if(ret == `newldap || ret == `useldap )
		{
			KerberosServer::setDBtype("ldap");
			KerberosServer::setDBvalue("database_name", "");
			if(ret == `newldap)
			{
				KerberosServer::setLdapUseExisting(false);
			}
			else
			{
				KerberosServer::setLdapUseExisting(true);
			}
			
		}
		else if(ret == `next)
		{
			if((boolean)UI::QueryWidget (`id( `file), `Value))
			{
				ret = `file;
			}
			else if((boolean)UI::QueryWidget (`id( `newldap), `Value))
			{
				ret = `newldap;
			}
			else if((boolean)UI::QueryWidget (`id( `useldap), `Value))
			{
				ret = `useldap;
			}
			else
			{
				y2error("unexpected selection.");
				continue;
			}
			break;
		}
		else {
			y2error("unexpected retcode: %1", ret);
			continue;
		}
    }
	
    return ret;
}


symbol AskBasicDialog(boolean adv) {

    /* caption */
    string caption = _("Basic Kerberos Settings");

	term advButton = `Empty();

	if(adv)
	{
		/* Button text */
		advButton = `PushButton(`id(`advanced), _("&Advanced Configuration"));
	}

	map<string, any> firewall_settings = $[
										   "services": [ "service:kdc" , "service:kadmind" ],
										   "display_details": true,
										  ];
	map<string, any> firewall_widget =
		CWMFirewallInterfaces::CreateOpenFirewallWidget (firewall_settings);

	
    term content = `HBox ( `HSpacing (3), `VBox (
                     `VSpacing (0.5),
					 /* Frame lable */
                     `Frame (_("Basic Kerberos Settings"),
                       `VBox(
							 /* TextEntry label: "Realm" is a typical kerberos phrase.
								Please think twice please before you translate this,
								and check with kerberos.pot how it is translated there. */
							 `TextEntry (`id (`realm), _("Realm"), KerberosServer::getDBrealm()),
							 `Password  (`id (`pw1), `opt(`hstretch), Label::Password(), KerberosServer::getDBpassword()),
							 `Password  (`id (`pw2), `opt(`hstretch), Label::ConfirmPassword(), KerberosServer::getDBpassword())
                       )
                     ),
					 advButton,
					 `VSpacing( 1 ),
					 /* Frame label */
					 `Frame(_("Firewall Settings"),
							firewall_widget["custom_widget"]:`Empty()
						   )
					));

    Wizard::SetContentsButtons (
        caption, content, HELPS["basic"]:"",
        Label::BackButton (),
        Label::NextButton ()
    );

	CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");
	
	symbol ret = nil;
	map event = $[];
	
    while(true)
	{
		event = UI::WaitForEvent ();
        ret = (symbol) event["ID"]:nil;

		CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);
		
        /* abort? */
        if(ret == `abort || ret == `cancel)
		{
            if(ReallyAbort()) break;
            else continue;
        }
		else if(ret == `back)
		{
			break;
		}
        else if(ret == `advanced || ret == `next)
        {
			CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
			
			string stash = KerberosServer::getDBvalue("key_stash_file");
			string oldrealm = KerberosServer::getDBrealm();
			string realm = (string) UI::QueryWidget (`id(`realm), `Value);
						
			string newstash = regexpsub(stash, "^(.+)"+oldrealm+"$", "\\1"+realm);
			if(newstash != nil)
			{
				KerberosServer::setDBvalue("key_stash_file", newstash);
			}

            // --------------------------------- password checks
            string pw1   = (string) UI::QueryWidget(`id(`pw1), `Value);
            string pw2   = (string) UI::QueryWidget(`id(`pw2), `Value);
			
            if (pw1 != pw2)
            {
                // The two user password information do not match
                // error popup
                Report::Error(_("The passwords do not match.
Try again."));
                UI::SetFocus (`id(`pw1));
                continue;
            }
			
            KerberosServer::setDBrealm(realm);
            KerberosServer::setDBpassword(pw1);

			if(ret == `next && pw1 == "")
			{
				// Error popup
				Report::Error(_("Empty password is not allowed."));
                UI::SetFocus (`id(`pw1));
                continue;
			}
			
			break;
        }
        else
		{
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}

symbol AskLdapDialog(boolean init) {

    /* caption */
    string caption = _("Kerberos Setting for the LDAP Back-End");
	
	string help = HELPS["useldap"]:"";
		
	if(!init)
	{
		KerberosServer::ReadDefaultLdapValues();
	}
	else
	{
		KerberosServer::CalcDefaultLdapValues();
	}
	/* TextEntry label */
	term ldapServerTl = `TextEntry (`id (`server), _("LDAP Server URI:"), KerberosServer::getLdapDBvalue("ldap_server"));
	term pwCheckbox1  = `Empty();
	/* TextEntry label */
	term kadmindnW = `TextEntry (`id (`kadmin), _("Kadmin Bind DN:"),
								 KerberosServer::getLdapDBvalue("ldap_kadmind_dn"));
	term kadminpw1 = `HBox(`Password  (`id (`kadminpw1), `opt(`hstretch), Label::Password(), KerberosServer::getLdapKadmPw()),
						   `HSpacing (3),
						   `Password  (`id (`kadminpw2), `opt(`hstretch), Label::ConfirmPassword(), KerberosServer::getLdapKadmPw()));
	
	if(init)
	{
		help = HELPS["newldap"]:"";

		// when we init a new ldap server , we know the URI. No need to ask for it.
		ldapServerTl = `Empty();

		kadmindnW = `Empty();
		kadminpw1 = `Empty();
		//kadminpw2 = `Empty();
		
		pwCheckbox1 = `CheckBox( `id(`kdc_use_kdcpw), `opt (`notify),
								// Checkbox text
								_("Use previously entered password"), true);
	}
	
    term content = `HBox ( `HSpacing (3), `VBox (
						 `VSpacing (0.5),
						 /* Frame label */
						 `Frame (_("LDAP Settings"),
						 `VBox(
							   ldapServerTl,
							   /* TextEntry label */
							   `TextEntry (`id (`basedn), _("LDAP base DN:"),
										   KerberosServer::getLdapBaseDN()),
							   /* TextEntry label */
							   `TextEntry (`id (`container), _("Kerberos Container DN:"),
										   KerberosServer::getLdapDBvalue("ldap_kerberos_container_dn")),
							   `HBox(
									 /* TextEntry label */
									 `TextEntry (`id (`kdcadmin), _("KDC Bind DN:"),
												 KerberosServer::getLdapDBvalue("ldap_kdc_dn")),
									 pwCheckbox1
									),
							   `HBox(
									 `Password  (`id (`kdcpw1), `opt(`hstretch), Label::Password(), KerberosServer::getLdapKdcPw()),
									 `HSpacing (3),
									 `Password  (`id (`kdcpw2), `opt(`hstretch), Label::ConfirmPassword(), KerberosServer::getLdapKdcPw())),
							   kadmindnW,
							   kadminpw1
							   //kadminpw2							   
							  )
								),
						 /* Button text */
						 `PushButton(`id(`advanced), _("Advanced Configuration"))
												)
						 );


    Wizard::SetContentsButtons (
        caption, content, help,
        Label::BackButton (),
        Label::NextButton ()
    );

	if(init)
	{
		UI::ChangeWidget (`id (`kdcpw1), `Enabled, false);
		UI::ChangeWidget (`id (`kdcpw2), `Enabled, false);
	}
	
    symbol ret = nil;
    while(true) {

        ret = (symbol) UI::UserInput();

        /* abort? */
        if(ret == `abort || ret == `cancel)
		{
            if(ReallyAbort()) break;
            else continue;
        }
		else if(ret == `back)
		{
			break;
		}
		else if(ret == `kdc_use_kdcpw)
		{
			UI::ChangeWidget (`id (`kdcpw1), `Enabled, !(boolean)UI::QueryWidget(`id(`kdc_use_kdcpw), `Value));
			UI::ChangeWidget (`id (`kdcpw2), `Enabled, !(boolean)UI::QueryWidget(`id(`kdc_use_kdcpw), `Value));
		}
        else if(ret == `next || ret == `advanced)
		{
			if(init && (boolean)UI::QueryWidget(`id(`kdc_use_kdcpw), `Value))
			{
				KerberosServer::setLdapKdcPw(KerberosServer::getDBpassword());
			}
			else
			{
				string pw1   = (string) UI::QueryWidget(`id(`kdcpw1), `Value);
				string pw2   = (string) UI::QueryWidget(`id(`kdcpw2), `Value);
				
				if (pw1 != pw2)
				{
					// The two user password information do not match
					// error popup
					Report::Error(_("The LDAP KDC passwords do not match.
Try again."));
					UI::SetFocus (`id(`kdcpw1));
					continue;
				}
				KerberosServer::setLdapKdcPw(pw1);
			}
				
			if(init)
			{
				KerberosServer::setLdapKadmPw(KerberosServer::getLdapKdcPw());
			}
			else
			{
				string pw1   = (string) UI::QueryWidget(`id(`kadminpw1), `Value);
				string pw2   = (string) UI::QueryWidget(`id(`kadminpw2), `Value);
				
				if (pw1 != pw2)
				{
					// The two user password information do not match
					// error popup
					Report::Error(_("The LDAP Kadmin passwords do not match.
Try again."));
					UI::SetFocus (`id(`kadminpw1));
					continue;
				}
				KerberosServer::setLdapKadmPw(pw1);
			}

			if(init)
			{
				KerberosServer::setLdapDBvalue("ldap_server", "ldapi://");
			}
			else
			{
				KerberosServer::setLdapDBvalue("ldap_server",
											   (string) UI::QueryWidget(`id(`server), `Value));
			}
			
			//KerberosServer::setDBtype("ldap");

			KerberosServer::setLdapBaseDN((string) UI::QueryWidget(`id(`basedn), `Value));
			
			KerberosServer::setLdapDBvalue("ldap_kerberos_container_dn",
										   (string) UI::QueryWidget(`id(`container), `Value));
			KerberosServer::setLdapDBvalue("ldap_kdc_dn",
										   (string) UI::QueryWidget(`id(`kdcadmin), `Value));
			if(init)
			{
				KerberosServer::setLdapDBvalue("ldap_kadmind_dn",
											   (string) UI::QueryWidget(`id(`kdcadmin), `Value));
			}
			else
			{
				KerberosServer::setLdapDBvalue("ldap_kadmind_dn",
											   (string) UI::QueryWidget(`id(`kadmin), `Value));
			}
			
			break;
        }
        else
		{
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


symbol AdvancedConfiguration(boolean ldap)
{
	list itemList = get_adv_itemlist();
	define symbol lastItem = nil;

    /* caption */
    string caption = _("Advanced Kerberos Configuration");

    // term content = `Label("Advanced Dialog");

	term button = `HBox(
						`PushButton(`id(`back), `opt(`key_F8), Label::BackButton()),
						`HStretch(),
						`PushButton(`id(`abort), `opt(`key_F9), Label::AbortButton()),
						`HStretch(),
						`PushButton(`id(`next), `opt(`key_F10), Label::NextButton()),
						`Empty()
					   );
	
	UI::OpenDialog (`opt(`defaultsize),
					`VBox (`VSpacing(3),
						   `HSpacing(85),
						   `HWeight (70,
									 `VBox(
										   `HBox(
												 `HWeight (35,
														   // tree widget label
														   `Tree(`id(`tree), `opt(`notify, `vstretch), _("&Advanced Options"), itemList)
														  ),
												 `HSpacing(1),
												 `HWeight(65,
														  `VBox(`HSpacing(60),
																// label widget
																`Left(`Heading(`id(`heading), `opt(`hstretch), _("Current Selection: "))),
																`VSpacing(0.5),
																`VBox (
																	   `ReplacePoint(`id(`replace),
																					 `RichText(`id(`id_advanced_d), ""))
																	  )
															   )
														 )
												),
										   button
										  )
									)
						  )
				   );
	
	UI::ChangeWidget (`id( `tree ), `CurrentItem, `advanced);
	lastItem = `advanced;
	
	symbol ret = `dummy;
	
	while (ret != `back  &&
		   ret != `abort &&
		   ret != `next)
	{
		ret = (symbol) UI::UserInput ();

        if(ret == `abort || ret == `cancel)
		{
            if(ReallyAbort()) break;
            else continue;
        }
		else if(ret == `back)
		{
			break;
		}
		
		symbol selected = (symbol)UI::QueryWidget(`id(`tree), `CurrentItem);
			
		// saving settings for old selection
		map item = itemMap[lastItem]:$[]; 
        any function = item["setCallback"]:nil;
		string error = "";
		if (function != nil)
		{
			any ret = eval(function);
			if (is(ret, string))
			{
				error = (string) ret;
			}
		}
			
		if (error != nil && size(error) > 0)
		{
			Popup::Error (error);
			// set selection back
			UI::ChangeWidget (`id( `tree ), `CurrentItem, lastItem);
		}
		else
		{
			if (ret == `add)
			{
				symbol selected = (symbol)UI::QueryWidget(`id(`tree), `CurrentItem);
				y2milestone ("Add for: %1", selected);
					
				// Calling Add callback
				map item = itemMap[lastItem]:$[];
                any function = item["addCallback"]:nil;
				if (function != nil)
				{
					any ret = eval(function);
				}
			}
			else if (ret == `modify)
			{
				symbol selected = (symbol)UI::QueryWidget(`id(`tree), `CurrentItem);
				y2milestone ("Modify for: %1", selected);
				
				// Calling Modify callback
				map item = itemMap[lastItem]:$[];
                any function = item["modifyCallback"]:nil;
				if (function != nil)
				{
					any ret = eval(function);
				}
			}
			else if (ret == `delete)
			{
				symbol selected = (symbol)UI::QueryWidget(`id(`tree), `CurrentItem);
				y2milestone ("Delete for: %1", selected);
				
				// Calling Delete callback
				map item = itemMap[lastItem]:$[];
                any function = item["deleteCallback"]:nil;
				if (function != nil)
				{
					any ret = eval(function);
				}
			}
			else
			{
				// no error --> goto next selection
				lastItem = selected;
				item = itemMap[selected]:$[];
                // header label
				UI::ChangeWidget (`id(`heading), `Value, _("Current Selection: ") + item["name"]:"");
				// showing concerning input fields
				UI::ReplaceWidget (`id(`replace), item["widget"]:`Empty() );
				
				// getting values
				function = item["getCallback"]:nil;
				if (function != nil)
				{
					any ret = eval(function);
				}
			}
		}
	}

	UI::CloseDialog ();

	return ret;
}

/**
 * Summary dialog
 * @return dialog result
 */
symbol SummaryDialog() {

    /* KerberosServer summary dialog caption */
    string caption = _("Kerberos Server Configuration");

    list summary = KerberosServer::Summary();
	string configured = summary[0]:"";

	map<string, any> firewall_settings = $[
										   "services": [ "service:kdc" , "service:kadmind" ],
										   "display_details": true,
										  ];
	map<string, any> firewall_widget =
		CWMFirewallInterfaces::CreateOpenFirewallWidget (firewall_settings);

		

	term button = `HBox(
						`PushButton(`id(`edit), Label::EditButton()),
						`HStretch());

    /* Frame label */
	term contents = `VBox (
						   `VSpacing (0.5),
						   `RadioButtonGroup(`id(`rd),
											 `Left(`HVSquash(`VBox (
																	// radio button label
																	`Left (`RadioButton(`id(`disable), `opt (`notify),
																						_("&Disable Kerberos"),
																						!KerberosServer::getServiceEnabled())),
																	// radio button label
																	`Left(`RadioButton(`id(`enable), `opt (`notify),
																					   _("&Enable Kerberos"),
																					   KerberosServer::getServiceEnabled())
																		 ))))
											),
						   `RichText( configured ),
						   button,
						   `VSpacing( 1 ),
						   // Frame label
						   `Frame(_("Firewall Settings"),
								  firewall_widget["custom_widget"]:`Empty()
								 )
						  );
	
    Wizard::SetContentsButtons(caption, contents, HELPS["summary"]:"",
							   Label::BackButton(), Label::FinishButton());

	UI::ChangeWidget (`id (`edit), `Enabled, KerberosServer::getServiceEnabled());

	CWMFirewallInterfaces::OpenFirewallInit (firewall_widget, "");
	
    symbol ret = nil;
	map event = $[];
    while(true)
	{
		event = UI::WaitForEvent ();
        ret = (symbol) event["ID"]:nil;

		CWMFirewallInterfaces::OpenFirewallHandle (firewall_widget, "", event);
		
		/* abort? */
		if(ret == `abort || ret == `cancel || ret == `back)
		{
			if(ReallyAbort())
			{
				ret = `abort;
				break;
			}
			else continue;
		}
		else if(ret == `edit || ret == `next)
		{
			CWMFirewallInterfaces::OpenFirewallStore (firewall_widget, "", event);
			break;
		}
		else if(ret == `enable)
		{
			KerberosServer::setServiceEnabled(true);
			UI::ChangeWidget (`id (`edit), `Enabled, true);
		}
		else if(ret == `disable)
		{
			KerberosServer::setServiceEnabled(false);
			UI::ChangeWidget (`id (`edit), `Enabled, false);
		}
		else
		{
			y2error("unexpected retcode: %1", ret);
			continue;
		}
	}
	return ret;
}


/* EOF */
}
