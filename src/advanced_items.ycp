/* ------------------------------------------------------------------------------
 * Copyright (c) 2007 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/kerberos-server/advanced_items.ycp
 * Package:	Configuration of kerberos-server
 * Summary:	advanced item maps
 * Authors:	Michael Calmer <mc@novell.com>
 *
 * $Id: $
 */

{

textdomain "kerberos-server";

import "Wizard";
import "Label";
import "KerberosServer";

// #################################################################################
// #################################################################################
// #################################################################################

define void get_adv_acl_file() ``{
	y2debug("calling get_adv_acl_file");
	
	UI::ChangeWidget(`id(`id_acl_file), `Value, KerberosServer::getDBvalue("acl_file"));
}

define void set_adv_acl_file() ``{
	y2debug("calling set_adv_acl_file");
	
	KerberosServer::setDBvalue("acl_file",(string) UI::QueryWidget(`id(`id_acl_file), `Value));
}

// #################################################################################

define void get_adv_admin_keytab() ``{
	y2debug("calling get_adv_admin_keytab");
	
	UI::ChangeWidget(`id(`id_admin_keytab), `Value, KerberosServer::getDBvalue("admin_keytab"));
}

define void set_adv_admin_keytab() ``{
	y2debug("calling set_adv_admin_keytab");
	
	KerberosServer::setDBvalue("admin_keytab",(string) UI::QueryWidget(`id(`id_admin_keytab), `Value));
}

// #################################################################################

define void get_adv_default_principal_expiration() ``{
	y2debug("calling get_adv_default_principal_expiration");
	
	UI::ChangeWidget(`id(`id_default_principal_expiration), `Value, KerberosServer::getDBvalue("default_principal_expiration"));
}

define void set_adv_default_principal_expiration() ``{
	y2debug("calling set_adv_default_principal_expiration");
	
	KerberosServer::setDBvalue("default_principal_expiration",(string) UI::QueryWidget(`id(`id_default_principal_expiration), `Value));
}

// #################################################################################

define void get_adv_default_principal_flags() ``{
	y2debug("calling get_adv_default_principal_flags");
	
	string flags = KerberosServer::getDBvalue("default_principal_flags");
	
	UI::ChangeWidget(`id(`kdc_flags_allow_postdated), `Value, (issubstring (flags, "-allow_postdated"))?false:true);
	UI::ChangeWidget(`id(`kdc_flags_allow_forwardable), `Value, (issubstring (flags, "-allow_forwardable"))?false:true );
	UI::ChangeWidget(`id(`kdc_flags_allow_renewable), `Value, (issubstring (flags, "-allow_renewable"))?false:true);
	UI::ChangeWidget(`id(`kdc_flags_allow_proxiable), `Value,(issubstring (flags, "-allow_proxiable"))?false:true );
	UI::ChangeWidget(`id(`kdc_flags_allow_dup_skey), `Value, (issubstring (flags, "-allow_dup_skey"))?false:true);
	UI::ChangeWidget(`id(`kdc_flags_requires_preauth), `Value, (issubstring (flags, "+requires_preauth"))?true:false);
	UI::ChangeWidget(`id(`kdc_flags_requires_hwauth), `Value, (issubstring (flags, "+requires_hwauth"))?true:false);
	UI::ChangeWidget(`id(`kdc_flags_allow_svr), `Value, (issubstring (flags, "-allow_svr"))?false:true );
	UI::ChangeWidget(`id(`kdc_flags_allow_tgs_req), `Value, (issubstring (flags, "-allow_tgs_req"))?false:true);
	UI::ChangeWidget(`id(`kdc_flags_allow_tix), `Value, (issubstring (flags, "-allow_tix"))?false:true);
	UI::ChangeWidget(`id(`kdc_flags_needchange), `Value, (issubstring (flags, "+needchange"))?true:false);
	UI::ChangeWidget(`id(`kdc_flags_password_changing_service), `Value, (issubstring (flags, "+password_changing_service"))?true:false);
}

define void set_adv_default_principal_flags() ``{
	y2debug("calling set_adv_default_principal_flags");

	string flags = "";

	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_postdated), `Value)) {
		flags = flags + "+allow_postdated ";
	} else {
		flags = flags + "-allow_postdated ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_forwardable), `Value)) {
		flags = flags + "+allow_forwardable ";
	} else {
		flags = flags + "-allow_forwardable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_renewable), `Value)) {
		flags = flags + "+allow_renewable ";
	} else {
		flags = flags + "-allow_renewable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_proxiable), `Value)) {
		flags = flags + "+allow_proxiable ";
	} else {
		flags = flags + "-allow_proxiable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_dup_skey), `Value)) {
		flags = flags + "+allow_dup_skey ";
	} else {
		flags = flags + "-allow_dup_skey ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_requires_preauth), `Value)) {
		flags = flags + "+requires_preauth ";
	} else {
		flags = flags + "-requires_preauth ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_requires_hwauth), `Value)) {
		flags = flags + "+requires_hwauth ";
	} else {
		flags = flags + "-requires_hwauth ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_svr), `Value)) {
		flags = flags + "+allow_svr ";
	} else {
		flags = flags + "-allow_svr ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_tgs_req), `Value)) {
		flags = flags + "+allow_tgs_req ";
	} else {
		flags = flags + "-allow_tgs_req ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_allow_tix), `Value)) {
		flags = flags + "+allow_tix ";
	} else {
		flags = flags + "-allow_tix ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_needchange), `Value)) {
		flags = flags + "+needchange ";
	} else {
		flags = flags + "-needchange ";
	}
	if((boolean) UI::QueryWidget(`id(`kdc_flags_password_changing_service), `Value)) {
		flags = flags + "+password_changing_service ";
	} else {
		flags = flags + "-password_changing_service ";
	}
	
	KerberosServer::setDBvalue("default_principal_flags", flags);
}

// #################################################################################

define void get_adv_dict_file() ``{
	y2debug("calling get_adv_dict_file");
	
	UI::ChangeWidget(`id(`id_dict_file), `Value, KerberosServer::getDBvalue("dict_file"));
}

define void set_adv_dict_file() ``{
	y2debug("calling set_adv_dict_file");
	
	KerberosServer::setDBvalue("dict_file",(string) UI::QueryWidget(`id(`id_dict_file), `Value));
}

// #################################################################################

define void get_adv_kadmind_port() ``{
	y2debug("calling get_adv_kadmind_port");
	
	UI::ChangeWidget(`id(`id_kadmind_port), `Value, KerberosServer::getDBvalue("kadmind_port"));
}

define void set_adv_kadmind_port() ``{
	y2debug("calling set_adv_kadmind_port");
	
	KerberosServer::setDBvalue("kadmind_port",(string) UI::QueryWidget(`id(`id_kadmind_port), `Value));
}

// #################################################################################

define void get_adv_kpasswd_port() ``{
	y2debug("calling get_adv_kpasswd_port");
	
	UI::ChangeWidget(`id(`id_kpasswd_port), `Value, KerberosServer::getDBvalue("kpasswd_port"));
}

define void set_adv_kpasswd_port() ``{
	y2debug("calling set_adv_kpasswd_port");
	
	KerberosServer::setDBvalue("kpasswd_port",(string) UI::QueryWidget(`id(`id_kpasswd_port), `Value));
}

// #################################################################################

define void get_adv_key_stash_file() ``{
	y2debug("calling get_adv_key_stash_file");
	
	UI::ChangeWidget(`id(`id_key_stash_file), `Value, KerberosServer::getDBvalue("key_stash_file"));
}

define void set_adv_key_stash_file() ``{
	y2debug("calling set_adv_key_stash_file");
	
	KerberosServer::setDBvalue("key_stash_file",(string) UI::QueryWidget(`id(`id_key_stash_file), `Value));
}

// #################################################################################

define void get_adv_kdc_ports() ``{
	y2debug("calling get_adv_kdc_ports");
	
	UI::ChangeWidget(`id(`id_kdc_ports), `Value, KerberosServer::getDBvalue("kdc_ports"));
}

define void set_adv_kdc_ports() ``{
	y2debug("calling set_adv_kdc_ports");
	
	KerberosServer::setDBvalue("kdc_ports",(string) UI::QueryWidget(`id(`id_kdc_ports), `Value));
}

// #################################################################################

define void get_adv_master_key_name() ``{
	y2debug("calling get_adv_master_key_name");
	
	UI::ChangeWidget(`id(`id_master_key_name), `Value, KerberosServer::getDBvalue("master_key_name"));
}

define void set_adv_master_key_name() ``{
	y2debug("calling set_adv_master_key_name");
	
	KerberosServer::setDBvalue("master_key_name",(string) UI::QueryWidget(`id(`id_master_key_name), `Value));
}

// #################################################################################

define void get_adv_master_key_type() ``{
	y2debug("calling get_adv_master_key_type");
	
	UI::ChangeWidget(`id(`id_master_key_type), `Value, KerberosServer::getDBvalue("master_key_type"));
}

define void set_adv_master_key_type() ``{
	y2debug("calling set_adv_master_key_type");
	
	KerberosServer::setDBvalue("master_key_type",(string) UI::QueryWidget(`id(`id_master_key_type), `Value));
}

// #################################################################################

define void get_adv_max_life() ``{
	y2milestone("calling get_adv_max_life");
	
	list t = KerberosServer::splitTime(KerberosServer::getDBvalue("max_life"));

	UI::ChangeWidget(`id(`id_max_life_available), `Value,
					 (KerberosServer::getDBvalue("max_life") == "")?false:true);

	
	UI::ChangeWidget(`id(`id_max_life_days), `Value, tointeger(t[0]:"0"));
	UI::ChangeWidget(`id(`id_max_life_time), `Value, t[1]:"01:00:00");

	UI::ChangeWidget(`id(`id_max_life_days), `Enabled, (KerberosServer::getDBvalue("max_life") == "")?false:true);
	UI::ChangeWidget(`id(`id_max_life_time), `Enabled, (KerberosServer::getDBvalue("max_life") == "")?false:true);
}

define void set_adv_max_life() ``{
	y2milestone("calling set_adv_max_life");

	if((boolean) UI::QueryWidget(`id(`id_max_life_available), `Value) == false)
	{
		KerberosServer::setDBvalue("max_life", "");
	}
	else
	{
		string s = tostring((integer) UI::QueryWidget(`id(`id_max_life_days), `Value));
		s = s + " ";
		s = s + (string) UI::QueryWidget(`id(`id_max_life_time), `Value);
	
		KerberosServer::setDBvalue("max_life",s);
	}
}

// #################################################################################

define void get_adv_max_renewable_life() ``{
	y2debug("calling get_adv_max_renewable_life");

	list t = KerberosServer::splitTime(KerberosServer::getDBvalue("max_renewable_life"));

	UI::ChangeWidget(`id(`id_max_renewable_life_available), `Value,
					 (KerberosServer::getDBvalue("max_renewable_life") == "")?false:true);

	
	UI::ChangeWidget(`id(`id_max_renewable_life_days), `Value, tointeger(t[0]:"0"));
	UI::ChangeWidget(`id(`id_max_renewable_life_time), `Value, t[1]:"01:00:00");

	UI::ChangeWidget(`id(`id_max_renewable_life_days), `Enabled,
					 (KerberosServer::getDBvalue("max_renewable_life") == "")?false:true);
	UI::ChangeWidget(`id(`id_max_renewable_life_time), `Enabled,
					 (KerberosServer::getDBvalue("max_renewable_life") == "")?false:true);

}

define void set_adv_max_renewable_life() ``{
	y2debug("calling set_adv_max_renewable_life");

	if((boolean) UI::QueryWidget(`id(`id_max_renewable_life_available), `Value) == false)
	{
		KerberosServer::setDBvalue("max_renewable_life", "");
	}
	else
	{
		string s = tostring((integer) UI::QueryWidget(`id(`id_max_renewable_life_days), `Value));
		s = s + " ";
		s = s + (string) UI::QueryWidget(`id(`id_max_renewable_life_time), `Value);
		
		KerberosServer::setDBvalue("max_renewable_life",s);
	}
}

// #################################################################################

define void get_adv_supported_enctypes() ``{
	y2debug("calling get_adv_supported_enctypes");
	
	UI::ChangeWidget(`id(`id_supported_enctypes), `Value, KerberosServer::getDBvalue("supported_enctypes"));
}

define void set_adv_supported_enctypes() ``{
	y2debug("calling set_adv_supported_enctypes");
	
	KerberosServer::setDBvalue("supported_enctypes",(string) UI::QueryWidget(`id(`id_supported_enctypes), `Value));
}

// #################################################################################

define void get_adv_kdc_supported_enctypes() ``{
	y2debug("calling get_adv_kdc_supported_enctypes");
	
	UI::ChangeWidget(`id(`id_kdc_supported_enctypes), `Value, KerberosServer::getDBvalue("kdc_supported_enctypes"));
}

define void set_adv_kdc_supported_enctypes() ``{
	y2debug("calling set_adv_kdc_supported_enctypes");
	
	KerberosServer::setDBvalue("kdc_supported_enctypes",(string) UI::QueryWidget(`id(`id_kdc_supported_enctypes), `Value));
}

// #################################################################################

define void get_adv_reject_bad_transit() ``{
	y2debug("calling get_adv_reject_bad_transit");
	
	UI::ChangeWidget(`id(`id_reject_bad_transit), `Value, KerberosServer::getDBvalue("reject_bad_transit"));
}

define void set_adv_reject_bad_transit() ``{
	y2debug("calling set_adv_reject_bad_transit");
	
	KerberosServer::setDBvalue("reject_bad_transit",(string) UI::QueryWidget(`id(`id_reject_bad_transit), `Value));
}

// #################################################################################

define void get_adv_database_name() ``{
	y2debug("calling get_adv_database_name");
	
	UI::ChangeWidget(`id(`id_database_name), `Value, KerberosServer::getDBvalue("database_name"));
}

define void set_adv_database_name() ``{
	y2debug("calling set_adv_database_name");
	
	KerberosServer::setDBvalue("database_name",(string) UI::QueryWidget(`id(`id_database_name), `Value));
}

// #################################################################################

define void get_adv_ldap_conns_per_server() ``{
	y2debug("calling get_adv_ldap_conns_per_server");
	
	UI::ChangeWidget(`id(`id_ldap_conns_per_server), `Value, KerberosServer::getLdapDBvalue("ldap_conns_per_server"));
}

define void set_adv_ldap_conns_per_server() ``{
	y2debug("calling set_adv_ldap_conns_per_server");
	
	KerberosServer::setLdapDBvalue("ldap_conns_per_server",(string) UI::QueryWidget(`id(`id_ldap_conns_per_server), `Value));
}

// #################################################################################

define void get_adv_ldap_service_password_file() ``{
	y2debug("calling get_adv_ldap_service_password_file");
	
	UI::ChangeWidget(`id(`id_ldap_service_password_file), `Value, KerberosServer::getLdapDBvalue("ldap_service_password_file"));
}

define void set_adv_ldap_service_password_file() ``{
	y2debug("calling set_adv_ldap_service_password_file");
	
	KerberosServer::setLdapDBvalue("ldap_service_password_file",(string) UI::QueryWidget(`id(`id_ldap_service_password_file), `Value));
}

// #################################################################################

define void get_adv_kdb_subtrees() ``{
	y2debug("calling get_adv_kdb_subtrees");
	
	UI::ChangeWidget(`id(`id_kdb_subtrees), `Value, KerberosServer::getKdbvalue("kdb_subtrees"));

	UI::ChangeWidget(`id(`sub), `Value,
					 (KerberosServer::getKdbvalue("kdb_sscope") == "sub")?true:false);
	UI::ChangeWidget(`id(`one), `Value,
					 (KerberosServer::getKdbvalue("kdb_sscope") == "sub")?false:true);
}

define void set_adv_kdb_subtrees() ``{
	y2debug("calling set_adv_kdb_subtrees");
	
	KerberosServer::setKdbvalue("kdb_subtrees",(string) UI::QueryWidget(`id(`id_kdb_subtrees), `Value));

	boolean i = (boolean)UI::QueryWidget(`id(`sub), `Value);
	y2milestone("radiobutton val: %1", UI::QueryWidget(`id(`sub), `Value));
	KerberosServer::setKdbvalue("kdb_sscope", (i == true)?"sub":"one");
}

// #################################################################################

define void get_adv_kdb_containerref() ``{
	y2debug("calling get_adv_kdb_containerref");
	
	UI::ChangeWidget(`id(`id_kdb_containerref), `Value, KerberosServer::getKdbvalue("kdb_containerref"));
}

define void set_adv_kdb_containerref() ``{
	y2debug("calling set_adv_kdb_containerref");
	
	KerberosServer::setKdbvalue("kdb_containerref",(string) UI::QueryWidget(`id(`id_kdb_containerref), `Value));
}

// #################################################################################

define void get_adv_kdb_maxtktlife() ``{
	y2debug("calling get_adv_kdb_maxtktlife");

	list t = KerberosServer::splitTime(KerberosServer::getKdbvalue("kdb_maxtktlife"));

	UI::ChangeWidget(`id(`id_kdb_maxtktlife_available), `Value,
					 (KerberosServer::getKdbvalue("kdb_maxtktlife") == "")?false:true);

	
	UI::ChangeWidget(`id(`id_kdb_maxtktlife_days), `Value, tointeger(t[0]:"0"));
	UI::ChangeWidget(`id(`id_kdb_maxtktlife_time), `Value, t[1]:"01:00:00");

	UI::ChangeWidget(`id(`id_kdb_maxtktlife_days), `Enabled,
					 (KerberosServer::getKdbvalue("kdb_maxtktlife") == "")?false:true);
	UI::ChangeWidget(`id(`id_kdb_maxtktlife_time), `Enabled,
					 (KerberosServer::getKdbvalue("kdb_maxtktlife") == "")?false:true);
}

define void set_adv_kdb_maxtktlife() ``{
	y2debug("calling set_adv_kdb_maxtktlife");

	if((boolean) UI::QueryWidget(`id(`id_kdb_maxtktlife_available), `Value) == false)
	{
		KerberosServer::setKdbvalue("kdb_maxtktlife", "");
	}
	else
	{
		string s = tostring((integer) UI::QueryWidget(`id(`id_kdb_maxtktlife_days), `Value));
		s = s + " ";
		s = s + (string) UI::QueryWidget(`id(`id_kdb_maxtktlife_time), `Value);
		
		KerberosServer::setKdbvalue("kdb_maxtktlife", s);
	}
}

// #################################################################################

define void get_adv_kdb_maxrenewlife() ``{
	y2debug("calling get_adv_kdb_maxrenewlife");

	list t = KerberosServer::splitTime(KerberosServer::getKdbvalue("kdb_maxrenewlife"));
	
	UI::ChangeWidget(`id(`id_kdb_maxrenewlife_available), `Value,
					 (KerberosServer::getKdbvalue("kdb_maxrenewlife") == "")?false:true);

	UI::ChangeWidget(`id(`id_kdb_maxrenewlife_days), `Value, tointeger(t[0]:"0"));
	UI::ChangeWidget(`id(`id_kdb_maxrenewlife_time), `Value, t[1]:"01:00:00");

	UI::ChangeWidget(`id(`id_kdb_maxrenewlife_days), `Enabled,
					 (KerberosServer::getKdbvalue("kdb_maxrenewlife") == "")?false:true);
	UI::ChangeWidget(`id(`id_kdb_maxrenewlife_time), `Enabled,
					 (KerberosServer::getKdbvalue("kdb_maxrenewlife") == "")?false:true);
}

define void set_adv_kdb_maxrenewlife() ``{
	y2debug("calling set_adv_kdb_maxrenewlife");
	
	if((boolean) UI::QueryWidget(`id(`id_kdb_maxrenewlife_available), `Value) == false)
	{
		KerberosServer::setKdbvalue("kdb_maxrenewlife", "");
	}
	else
	{
		string s = tostring((integer) UI::QueryWidget(`id(`id_kdb_maxrenewlife_days), `Value));
		s = s + " ";
		s = s + (string) UI::QueryWidget(`id(`id_kdb_maxrenewlife_time), `Value);
		
		KerberosServer::setKdbvalue("kdb_maxrenewlife", s);
	}
}

// #################################################################################

define void get_adv_kdb_flags() ``{
	y2debug("calling get_adv_kdb_flags");

	string flags = KerberosServer::getKdbvalue("kdb_flags");
	
	UI::ChangeWidget(`id(`kdb_flags_allow_postdated), `Value, (issubstring (flags, "-allow_postdated"))?false:true);
	UI::ChangeWidget(`id(`kdb_flags_allow_forwardable), `Value, (issubstring (flags, "-allow_forwardable"))?false:true );
	UI::ChangeWidget(`id(`kdb_flags_allow_renewable), `Value, (issubstring (flags, "-allow_renewable"))?false:true);
	UI::ChangeWidget(`id(`kdb_flags_allow_proxiable), `Value,(issubstring (flags, "-allow_proxiable"))?false:true );
	UI::ChangeWidget(`id(`kdb_flags_allow_dup_skey), `Value, (issubstring (flags, "-allow_dup_skey"))?false:true);
	UI::ChangeWidget(`id(`kdb_flags_requires_preauth), `Value, (issubstring (flags, "+requires_preauth"))?true:false);
	UI::ChangeWidget(`id(`kdb_flags_requires_hwauth), `Value, (issubstring (flags, "+requires_hwauth"))?true:false);
	UI::ChangeWidget(`id(`kdb_flags_allow_svr), `Value, (issubstring (flags, "-allow_svr"))?false:true );
	UI::ChangeWidget(`id(`kdb_flags_allow_tgs_req), `Value, (issubstring (flags, "-allow_tgs_req"))?false:true);
	UI::ChangeWidget(`id(`kdb_flags_allow_tix), `Value, (issubstring (flags, "-allow_tix"))?false:true);
	UI::ChangeWidget(`id(`kdb_flags_needchange), `Value, (issubstring (flags, "+needchange"))?true:false);
	UI::ChangeWidget(`id(`kdb_flags_password_changing_service), `Value, (issubstring (flags, "+password_changing_service"))?true:false);
}

define void set_adv_kdb_flags() ``{
	y2debug("calling set_adv_kdb_flags");

	string flags = "";

	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_postdated), `Value)) {
		flags = flags + "+allow_postdated ";
	} else {
		flags = flags + "-allow_postdated ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_forwardable), `Value)) {
		flags = flags + "+allow_forwardable ";
	} else {
		flags = flags + "-allow_forwardable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_renewable), `Value)) {
		flags = flags + "+allow_renewable ";
	} else {
		flags = flags + "-allow_renewable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_proxiable), `Value)) {
		flags = flags + "+allow_proxiable ";
	} else {
		flags = flags + "-allow_proxiable ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_dup_skey), `Value)) {
		flags = flags + "+allow_dup_skey ";
	} else {
		flags = flags + "-allow_dup_skey ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_requires_preauth), `Value)) {
		flags = flags + "+requires_preauth ";
	} else {
		flags = flags + "-requires_preauth ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_requires_hwauth), `Value)) {
		flags = flags + "+requires_hwauth ";
	} else {
		flags = flags + "-requires_hwauth ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_svr), `Value)) {
		flags = flags + "+allow_svr ";
	} else {
		flags = flags + "-allow_svr ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_tgs_req), `Value)) {
		flags = flags + "+allow_tgs_req ";
	} else {
		flags = flags + "-allow_tgs_req ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_allow_tix), `Value)) {
		flags = flags + "+allow_tix ";
	} else {
		flags = flags + "-allow_tix ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_needchange), `Value)) {
		flags = flags + "+needchange ";
	} else {
		flags = flags + "-needchange ";
	}
	if((boolean) UI::QueryWidget(`id(`kdb_flags_password_changing_service), `Value)) {
		flags = flags + "+password_changing_service ";
	} else {
		flags = flags + "-password_changing_service ";
	}
	
	KerberosServer::setKdbvalue("kdb_flags", flags);
}


// #################################################################################

define list get_adv_itemlist() {
	list generalItemList = [];
	list itemlist = [];

	if(KerberosServer::getDBtype() == "file")
	{
		// Treeview list item
		itemlist = add(itemlist, `item(`id(`database_name),"Database Path"));
	}
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`acl_file), _("ACL File")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`admin_keytab), _("Administrator Keytab")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`default_principal_expiration), _("Default Principal Expiration")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`default_principal_flags), _("Default Principal Flags")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`dict_file), _("Dictionary File")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`kadmind_port), _("Kadmin Daemon Port")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`kpasswd_port), _("Kpasswd Daemon Port")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`key_stash_file), _("Key Stash File")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`kdc_ports), _("KDC Port")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`master_key_name), _("Master Key Name")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`master_key_type), _("Master Key Type")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`max_life), _("Maximum Ticket Life Time")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`max_renewable_life), _("Maximum Ticket Renew Time")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`supported_enctypes), _("Default Encrytion Types")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`kdc_supported_enctypes), _("KDC Supported Encrytion Types")));
	// Treeview list item
	itemlist = add(itemlist, `item(`id(`reject_bad_transit), _("Reject Bad Transit")));


    /*
	  itemlist = add(itemlist, );
	  itemlist = add(itemlist, );
	  itemlist = add(itemlist, );
	*/

	// Treeview list item
	generalItemList = add(generalItemList, `item(`id(`advanced), _("Advanced Settings"), true, itemlist));

	if(KerberosServer::getDBtype() == "ldap")
	{
		list ldapitems = [];

		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`ldap_conns_per_server), _("Number of LDAP connections")));
		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`kdb_subtrees), _("Search Subtrees")));
		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`kdb_containerref), _("Principal Container")));
		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`kdb_maxtktlife), _("Maximum Ticket Life Time")));
		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`kdb_maxrenewlife), _("Maximum Ticket Renew Time")));
		// Treeview list item
		ldapitems = add(ldapitems, `item(`id(`kdb_flags), _("Default Principal Flags")));
        /*
		  ldapitems = add(ldapitems, );
		  ldapitems = add(ldapitems, );
		  ldapitems = add(ldapitems, );
		*/
		
		generalItemList = add(generalItemList, `item(`id(`advldap), _("Advanced LDAP Settings"), true, ldapitems));
	}
	
	return generalItemList;
}

// #################################################################################
// #################################################################################
// #################################################################################



// #################################################################################

define map itemMap = $[
					   `advanced : $["name"   : _("Advanced Settings"),
									 "widget" : `RichText(`id(`id_advanced), ""),
									],
					   `database_name : $[
										  "name"   : _("Database Path"),
										  "widget" : `Frame ("",
															 `VBox(`TextEntry(`id(`id_database_name),
																			  _("&Database Path"),
																			  KerberosServer::getDBvalue("database_name")),
																   `VSpacing(1.5),
																   `RichText( HELPS["adv_database_name"]:"")
																  )
															),
										  "getCallback" : ``(get_adv_database_name()),
										  "setCallback" : ``(set_adv_database_name())
										 ],
					   `acl_file : $["name"   : _("ACL File"),
									 "widget" : `Frame ("",
														`VBox(`TextEntry(`id(`id_acl_file),
																		 _("ACL &File"),
																		 KerberosServer::getDBvalue("acl_file")),
															  `VSpacing(1.5),
															  `RichText( HELPS["adv_acl_file"]:"")
															 )
													   ),
									 "getCallback" : ``(get_adv_acl_file()),
									 "setCallback" : ``(set_adv_acl_file())
									],
					   `admin_keytab : $["name"   : _("Administrator Keytab"),
										 "widget" : `Frame ("",
															`VBox(`TextEntry(`id(`id_admin_keytab),"",
																			 KerberosServer::getDBvalue("admin_keytab")),
																  `VSpacing(1.5),
																  `RichText( HELPS["adv_admin_keytab"]:"")
																 )
														   ),
										 "getCallback" : ``(get_adv_admin_keytab()),
										 "setCallback" : ``(set_adv_admin_keytab())
										],
					   `default_principal_expiration : $["name"   : _("Default Principal Expiration"),
														 "widget" : `Frame ("",
																			`VBox(`TextEntry(`id(`id_default_principal_expiration),"",
																							 KerberosServer::getDBvalue("default_principal_expiration")),
																				  `VSpacing(1.5),
																				  `RichText( HELPS["adv_default_principal_expiration"]:"")
																				 )
																		   ),
														 "getCallback" : ``(get_adv_default_principal_expiration()),
														 "setCallback" : ``(set_adv_default_principal_expiration())
														],
					   `default_principal_flags : $["name"   : _("Default Principal Flags"),
													"widget" :`Frame ("",
														 `VBox(`Left(`CheckBox(`id (`kdc_flags_allow_postdated),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow postdated"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_allow_forwardable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow forwardable"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_allow_renewable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow renewable"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_allow_proxiable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow proxiable"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_allow_dup_skey),
																			   // checkbox text in MultiSelectionBox
																			   _("Enable user-to-user authentication"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_requires_preauth),
																			   // checkbox text in MultiSelectionBox
																			   _("Requires preauth"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_requires_hwauth),
																			   // checkbox text in MultiSelectionBox
																			   _("Requires hwauth"), false)),
															   // checkbox text in MultiSelectionBox
															   `Left(`CheckBox(`id (`kdc_flags_allow_svr),
																			   _("Allow service"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_allow_tgs_req),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow tgs request"), false)),
															   // checkbox text in MultiSelectionBox
															   `Left(`CheckBox(`id (`kdc_flags_allow_tix),
																			   _("Allow tickets"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_needchange),
																			   // checkbox text in MultiSelectionBox
																			   _("Needchange"), false)),
															   `Left(`CheckBox(`id (`kdc_flags_password_changing_service),
																			   // checkbox text in MultiSelectionBox
																			   _("Password changing service"), false)),
															   `VSpacing(1.5),
															   `RichText( HELPS["adv_default_principal_flags"]:"")
															  )
														),
													"default"     : ``(get_adv_default_principal_flags()),
													"getCallback" : ``(get_adv_default_principal_flags()),
													"setCallback" : ``(set_adv_default_principal_flags())
												   ],
					   `dict_file : $["name"   : _("Dictionary File"),
									  "widget" : `Frame ("",
														 `VBox(`TextEntry(`id(`id_dict_file), "",
																		  KerberosServer::getDBvalue("dict_file")),
															   `VSpacing(1.5),
															   `RichText( HELPS["adv_dict_file"]:"")
															  )
														),
									  "getCallback" : ``(get_adv_dict_file()),
									  "setCallback" : ``(set_adv_dict_file())
									 ],
					   `kadmind_port : $["name"   : _("Kadmin Daemon Port"),
										 "widget" : `Frame ("",
															`VBox(`TextEntry(`id(`id_kadmind_port), "",
																			 KerberosServer::getDBvalue("kadmind_port")),
																  `VSpacing(1.5),
																  `RichText( HELPS["adv_kadmind_port"]:"")
																 )
														   ),
										 "getCallback" : ``(get_adv_kadmind_port()),
										 "setCallback" : ``(set_adv_kadmind_port())
										],
					   `kpasswd_port : $["name"   : _("Kpasswd Daemon Port"),
										 "widget" : `Frame ("",
															`VBox(`TextEntry(`id(`id_kpasswd_port), "",
																			 KerberosServer::getDBvalue("kpasswd_port")),
																  `VSpacing(1.5),
																  `RichText( HELPS["adv_kpasswd_port"]:"")
																 )
														   ),
										 "getCallback" : ``(get_adv_kpasswd_port()),
										 "setCallback" : ``(set_adv_kpasswd_port())
										],
					   `key_stash_file : $["name"   : _("Key Stash File"),
										   "widget" : `Frame ("",
															  `VBox(`TextEntry(`id(`id_key_stash_file), "",
																			   KerberosServer::getDBvalue("key_stash_file")),
																	`VSpacing(1.5),
																	`RichText( HELPS["adv_key_stash_file"]:"")
																   )
															 ),
										   "getCallback" : ``(get_adv_key_stash_file()),
										   "setCallback" : ``(set_adv_key_stash_file())
										  ],
					   `kdc_ports : $["name"   : _("KDC Port"),
									  "widget" : `Frame ("",
														 `VBox(`TextEntry(`id(`id_kdc_ports), "",
																		  KerberosServer::getDBvalue("kdc_ports")),
															   `VSpacing(1.5),
															   `RichText( HELPS["adv_kdc_ports"]:"")
															  )
														),
									  "getCallback" : ``(get_adv_kdc_ports()),
									  "setCallback" : ``(set_adv_kdc_ports())
									 ],
					   `master_key_name : $["name"   : _("Master Key Name"),
											"widget" : `Frame ("",
															   `VBox(`TextEntry(`id(`id_master_key_name), "",
																				KerberosServer::getDBvalue("master_key_name")),
																	 `VSpacing(1.5),
																	 `RichText( HELPS["adv_master_key_name"]:"")
																	)
															  ),
											"getCallback" : ``(get_adv_master_key_name()),
											"setCallback" : ``(set_adv_master_key_name())
										   ],
					   `master_key_type : $["name"   : _("Master Key Type"),
											"widget" : `Frame ("",
															   `VBox(`TextEntry(`id(`id_master_key_type), "",
																				KerberosServer::getDBvalue("master_key_type")),
																	 `VSpacing(1.5),
																	 `RichText( HELPS["adv_master_key_type"]:"")
																	)
															  ),
											"getCallback" : ``(get_adv_master_key_type()),
											"setCallback" : ``(set_adv_master_key_type())
										   ],
					   `max_life : $["name"   : _("Maximum Ticket Life Time"),
									 "widget" : `Frame ("",
														`VBox(`Left(`CheckBox(`id(`id_max_life_available), `opt(`notify),
																			  // checkbox text
																			  _("Available"), true)),
															  `HBox(`IntField(`id(`id_max_life_days),
																			  _("Days"),
																			  0, 365, 0),
																	`Time(`id(`id_max_life_time),
																		  _("Time"))
																   ),
															  `VSpacing(1.5),
															  `RichText( HELPS["adv_max_life"]:"")
															 )
													   ),
									 "default"     : ``(get_adv_max_life()),
									 "getCallback" : ``(get_adv_max_life()),
									 "setCallback" : ``(set_adv_max_life())
									],
					   `max_renewable_life : $["name"   : _("Maximum Ticket Renew Time"),
											   "widget" : `Frame ("",
																  `VBox(`Left(`CheckBox(`id(`id_max_renewable_life_available), `opt(`notify),
																						// checkbox text
																						_("Available"), true)),
																		`HBox(`IntField(`id(`id_max_renewable_life_days),
																						_("Days"),
																						0, 365, 0),
																			  `Time(`id(`id_max_renewable_life_time),
																					_("Time"))
																			 ),
																		`VSpacing(1.5),
																		`RichText( HELPS["adv_max_renew_life"]:"")
																	   )
																 ),
											   "default"     : ``(get_adv_max_renewable_life()),
											   "getCallback" : ``(get_adv_max_renewable_life()),
											   "setCallback" : ``(set_adv_max_renewable_life())
											  ],
					   `supported_enctypes : $["name"   : _("Default Encrytion Types"),
											   "widget" : `Frame ("",
																  `VBox(`TextEntry(`id(`id_supported_enctypes), "",
																				   KerberosServer::getDBvalue("supported_enctypes")),
																		`VSpacing(1.5),
																		`RichText( HELPS["adv_supported_enctypes"]:"")
																	   )
																 ),
											   "getCallback" : ``(get_adv_supported_enctypes()),
											   "setCallback" : ``(set_adv_supported_enctypes())
											  ],
					   `kdc_supported_enctypes : $["name"   : _("KDC Supported Encrytion Types"),
												   "widget" : `Frame ("",
																	  `VBox(`TextEntry(`id(`id_kdc_supported_enctypes), "",
																					   KerberosServer::getDBvalue("kdc_supported_enctypes")),
																			`VSpacing(1.5),
																			`RichText( HELPS["adv_kdc_supported_enctypes"]:"")
																		   )
																	 ),
												   "getCallback" : ``(get_adv_kdc_supported_enctypes()),
												   "setCallback" : ``(set_adv_kdc_supported_enctypes())
												  ],
					   `reject_bad_transit : $["name"   : _("Reject Bad Transit"),
											   "widget" : `Frame ("",
																  `VBox(`TextEntry(`id(`id_reject_bad_transit), "",
																				   KerberosServer::getDBvalue("reject_bad_transit")),
																		`VSpacing(1.5),
																		`RichText( HELPS["adv_reject_bad_transit"]:"")
																	   )
																 ),
											   "getCallback" : ``(get_adv_reject_bad_transit()),
											   "setCallback" : ``(set_adv_reject_bad_transit())
											  ],
					   `ldap_conns_per_server : $["name"   : _("Number of LDAP connections"),
												  "widget" : `Frame ("",
																	 `VBox(`TextEntry(`id(`id_ldap_conns_per_server), "",
																					  KerberosServer::getLdapDBvalue("ldap_conns_per_server")),
																		   `VSpacing(1.5),
																		   `RichText( HELPS["adv_ldap_conns_per_server"]:"")
																		  )
																	),
												  "getCallback" : ``(get_adv_ldap_conns_per_server()),
												  "setCallback" : ``(set_adv_ldap_conns_per_server())
												 ],
					   `ldap_service_password_file : $["name"   : _("File for the LDAP password"),
												  "widget" : `Frame ("",
																	 `VBox(`TextEntry(`id(`id_ldap_service_password_file), "",
																					  KerberosServer::getLdapDBvalue("ldap_service_password_file")),
																		   `VSpacing(1.5),
																		   `RichText( HELPS["adv_ldap_service_password_file"]:"")
																		  )
																	),
												  "getCallback" : ``(get_adv_ldap_service_password_file()),
												  "setCallback" : ``(set_adv_ldap_service_password_file())
												 ],
					   `kdb_subtrees : $["name"   : _("Search Subtrees"),
										 "widget" : `Frame ("",
															`VBox(`TextEntry(`id(`id_kdb_subtrees), "",
																			 KerberosServer::getKdbvalue("kdb_subtrees")),
																  `VSpacing(1.5),
																  `Left(`Frame(_("Search Scope"),
																	   `RadioButtonGroup( `id(`rb),
																		 `VBox(
																			   `Left(`RadioButton(`id(`sub), _("subtree search"),
																								  (KerberosServer::getKdbvalue("kdb_sscope") == "sub")?true:false)),
																			   `Left(`RadioButton(`id(`one), _("one level"),
																								  (KerberosServer::getKdbvalue("kdb_sscope") == "sub")?false:true))
																			  )))),
																  `VSpacing(1.5),
																  `RichText( HELPS["adv_kdb_subtrees"]:"")
																 )
														   ),
										 "getCallback" : ``(get_adv_kdb_subtrees()),
										 "setCallback" : ``(set_adv_kdb_subtrees())
							],
					   `kdb_containerref : $["name"   : _("Principal Container"),
											 "widget" : `Frame ("",
																`VBox(`TextEntry(`id(`id_kdb_containerref), "",
																				 KerberosServer::getKdbvalue("kdb_containerref")),
																	  `VSpacing(1.5),
																	  `RichText( HELPS["adv_kdb_containerref"]:"")
																	 )
															   ),
											 "getCallback" : ``(get_adv_kdb_containerref()),
											 "setCallback" : ``(set_adv_kdb_containerref())
											],
					   `kdb_maxtktlife : $["name"   : _("Maximum Ticket Life Time"),
										   "widget" : `Frame ("",
															  `VBox(`Left(`CheckBox(`id(`id_kdb_maxtktlife_available), `opt(`notify),
																					// checkbox text
																					_("Available"), true)),
																	`HBox(`IntField(`id(`id_kdb_maxtktlife_days),
																					_("Days"),
																					0, 365, 0),
																		  `Time(`id(`id_kdb_maxtktlife_time),
																				_("Time"))
																		 ),
																	`VSpacing(1.5),
																	`RichText( HELPS["adv_kdb_maxtktlife"]:"")
																   )
															 ),
										   "default"     : ``(get_adv_kdb_maxtktlife()),
										   "getCallback" : ``(get_adv_kdb_maxtktlife()),
										   "setCallback" : ``(set_adv_kdb_maxtktlife())
										  ],
					   `kdb_maxrenewlife : $["name"   : _("Maximum Ticket Renew Time"),
											 "widget" : `Frame ("",
																`VBox(`Left(`CheckBox(`id(`id_kdb_maxrenewlife_available), `opt(`notify),
																					  // checkbox text
																					  _("Available"), true)),
																	  `HBox(`IntField(`id(`id_kdb_maxrenewlife_days),
																					  _("Days"),
																					  0, 365, 0),
																			`Time(`id(`id_kdb_maxrenewlife_time),
																				  _("Time"))
																		   ),
																	  `VSpacing(1.5),
																	  `RichText( HELPS["adv_kdb_maxrenewlife"]:"")
																	 )
															   ),
											 "default"     : ``(get_adv_kdb_maxrenewlife()),
											 "getCallback" : ``(get_adv_kdb_maxrenewlife()),
											 "setCallback" : ``(set_adv_kdb_maxrenewlife())
											],
					   `kdb_flags : $["name"   : _("Default Principal Flags"),
									  "widget" : `Frame ("",
														 `VBox(`Left(`CheckBox(`id (`kdb_flags_allow_postdated),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow postdated"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_allow_forwardable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow forwardable"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_allow_renewable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow renewable"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_allow_proxiable),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow proxiable"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_allow_dup_skey),
																			   // checkbox text in MultiSelectionBox
																			   _("Enable user-to-user authentication"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_requires_preauth),
																			   // checkbox text in MultiSelectionBox
																			   _("Requires preauth"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_requires_hwauth),
																			   // checkbox text in MultiSelectionBox
																			   _("Requires hwauth"), false)),
															   // checkbox text in MultiSelectionBox
															   `Left(`CheckBox(`id (`kdb_flags_allow_svr),
																			   _("Allow service"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_allow_tgs_req),
																			   // checkbox text in MultiSelectionBox
																			   _("Allow tgs request"), false)),
															   // checkbox text in MultiSelectionBox
															   `Left(`CheckBox(`id (`kdb_flags_allow_tix),
																			   _("Allow tickets"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_needchange),
																			   // checkbox text in MultiSelectionBox
																			   _("Needchange"), false)),
															   `Left(`CheckBox(`id (`kdb_flags_password_changing_service),
																			   // checkbox text in MultiSelectionBox
																			   _("Password changing service"), false)),
															   `VSpacing(1.5),
															   `RichText( HELPS["adv_default_principal_flags"]:"")
															  )
														),
									  "default"     : ``(get_adv_kdb_flags()),
									  "getCallback" : ``(get_adv_kdb_flags()),
									  "setCallback" : ``(set_adv_kdb_flags())
									 ],
					  ];
// #################################################################################

}
